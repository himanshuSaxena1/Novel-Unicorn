// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String?
  firstName String?
  lastName  String?
  avatar    String?
  role      UserRole @default(USER)
  
  // Email verification
  emailVerified DateTime?
  
  // Subscription
  subscriptions UserSubscription[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  novels            Novel[]
  chapters          Chapter[]
  bookmarks         Bookmark[]
  readingProgress   ReadingProgress[]
  payments          Payment[]
  reviews           Review[]
  
  @@map("users")
}

model UserSubscription {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  planId    String
  plan      SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime         @default(now())
  endDate   DateTime
  
  // Payment details
  paypalSubscriptionId String?
  stripeSubscriptionId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_subscriptions")
}

model SubscriptionPlan {
  id          String  @id @default(cuid())
  name        String
  tier        SubscriptionTier @unique
  price       Float
  yearlyPrice Float?
  features    String[]
  maxChapters Int     @default(-1) // -1 for unlimited
  isActive    Boolean @default(true)
  
  // Display
  description String?
  color       String  @default("#3B82F6")
  isPopular   Boolean @default(false)
  
  // Discounts
  discount    Float   @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  subscriptions UserSubscription[]
  
  @@map("subscription_plans")
}

model Novel {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  cover       String?
  status      NovelStatus @default(ONGOING)
  rating      Float?   @default(0)
  views       Int      @default(0)
  
  // Author
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Categories
  genres      String[]
  tags        String[]

  //Published
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Featured
  isFeatured  Boolean @default(false)
  featuredAt  DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  chapters    Chapter[]
  bookmarks   Bookmark[]
  reviews     Review[]
  
  @@map("novels")
}

model Chapter {
  id       String  @id @default(cuid())
  title    String
  slug     String
  content  String  @db.Text
  order    Int
  
  // Access Control
  accessTier SubscriptionTier @default(FREE)
  isPublished Boolean @default(false)
  
  // Novel relation
  novelId  String
  novel    Novel   @relation(fields: [novelId], references: [id], onDelete: Cascade)
  
  // Author
  authorId String
  author   User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Stats
  views    Int     @default(0)
  wordCount Int    @default(0)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  readingProgress ReadingProgress[]
  
  @@unique([novelId, slug])
  @@map("chapters")
}

model Review {
  id      String @id @default(cuid())
  rating  Int    // 1-5 stars
  comment String?
  
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  novelId String
  novel   Novel  @relation(fields: [novelId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, novelId])
  @@map("reviews")
}

model Bookmark {
  id      String @id @default(cuid())
  
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  novelId String
  novel   Novel  @relation(fields: [novelId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, novelId])
  @@map("bookmarks")
}

model ReadingProgress {
  id String @id @default(cuid())
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  progress  Float   @default(0) // 0-100 percentage
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, chapterId])
  @@map("reading_progress")
}

model Payment {
  id     String        @id @default(cuid())
  amount Float
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  subscriptionId String?
  
  // Payment details
  paypalPaymentId String?
  stripePaymentId String?
  status         PaymentStatus @default(PENDING)
  
  // Metadata
  metadata Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payments")
}

model SiteSettings {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("site_settings")
}

enum UserRole {
  USER
  AUTHOR
  TRANSLATOR
  EDITOR
  MODERATOR
  ADMIN
}

enum NovelStatus {
  ONGOING
  COMPLETED
  HIATUS
  DROPPED
}

enum SubscriptionTier {
  FREE
  SMALL
  MEDIUM
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}